if(quality.check == TRUE){
# NEW PLOT LIMITS
ymin <- ymin - ydiff*min(seq.y)*1.8
# value
quality <- unique(data_split[[f]]$quality.check)
# quality.check.display
quality.check.display <- annotate(
"text", x = seq(xmin, xmax, length.out=9)[2], colour = "black",
y = ymin + ydiff*max(seq.y), hjust = 0, parse = TRUE, size = 3.2,
label = paste("'Quality check:'~", paste("'", quality, "'")))
}
ggplot(plot_data, aes(x = Etime)) +
geom_point(aes(y = gas_meas, col = as.factor(flag_diff))) +
scale_color_manual(values = c("darkgrey", "black"), guide = "none") +
# Linear model
geom_abline(slope = LM.slope, intercept = LM.C0,
linewidth = 1, col = "blue") +
# Hutchinson and Mosier
geom_line(aes(y = HM_mod), linewidth = 1, col = "red") +
# Add a legend with info on the two models
new_scale_color() +
geom_text(data = mod.legend, parse = T, size = 3.5,
aes(x = x, y = y, label = content, hjust = 0, color = color)) +
scale_color_manual(values = mod.legend$color, guide = "none") +
# plot.display
nb.obs.display +
flux.term.display +
prec.display +
quality.check.display +
# Make the plot pretty
xlab("Time (sec)") + ylab +
scale_x_continuous(breaks = seq(-60, max(Etime), 30),
minor_breaks = seq(-60, max(Etime)+60, 10)) +
coord_cartesian(xlim = c(xmin + xdiff*0.05, xmax - xdiff*0.05),
ylim = c(ymin - ydiff*0.05, ymax + ydiff*max(seq.y))) +
theme_bw() +
ggtitle(UniqueID)+
theme(axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"))
prec.y
## plot.display ####
if(!is.null(plot.display)){
### NEW PLOT LIMITS with nb.obs, flux term and prec ####
if(any(grepl(paste(c("\\<nb.obs\\>", "\\<flux.term\\>", "\\<prec\\>"),
collapse = "|"), plot.display))){
display.length <- length(grep(paste(c(
"\\<nb.obs\\>", "\\<flux.term\\>", "\\<prec\\>"),
collapse = "|"), plot.display))
if(display.length > 2) ymin <- ymin - ydiff*min(seq.y)*1.8
if(display.length <= 2) ymin <- ymin - ydiff*min(seq.y)*0.9
}
### nb.obs ####
if(any(grepl("\\<nb.obs\\>", plot.display))){
# position
nb.obs.ord <- which(grep(paste(c("\\<nb.obs\\>",
"\\<flux.term\\>", "\\<prec\\>"), collapse = "|"),
plot.display, value = T) == "nb.obs")
if(nb.obs.ord == 1 | nb.obs.ord == 3) nb.obs.x <- 3
if(nb.obs.ord == 2 | nb.obs.ord == 4) nb.obs.x <- 6
if(nb.obs.ord <= 2) nb.obs.y <- -0.8
if(nb.obs.ord > 2) nb.obs.y <- 1.6
# value
nb.obs <- round(unique(data_corr[[f]]$nb.obs), 0)
# nb.obs.display
nb.obs.display <- annotate(
"text", x = seq(xmin, xmax, length.out=9)[nb.obs.x], colour = "black",
y = ymin - ydiff*max(seq.y)*nb.obs.y/2, hjust = 0,
label = paste(nb.obs, "~'data points used for diffusion'"), parse = TRUE, size = 3.2)
}
### flux.term ####
if(any(grepl("\\<flux.term\\>", plot.display))){
# position
flux.term.ord <- which(grep(paste(c("\\<nb.obs\\>",
"\\<flux.term\\>", "\\<prec\\>"), collapse = "|"),
plot.display, value = T) == "flux.term")
if(flux.term.ord == 1 | flux.term.ord == 3) flux.term.x <- 3
if(flux.term.ord == 2 | flux.term.ord == 4) flux.term.x <- 6
if(flux.term.ord <= 2) flux.term.y <- -0.8
if(flux.term.ord > 2) flux.term.y <- 1.6
# value
flux.term <- round(unique(data_corr[[f]]$flux.term), 1)
# flux.term.display
flux.term.display <- annotate(
"text", x = seq(xmin, xmax, length.out=9)[flux.term.x], colour = "black",
y = ymin - ydiff*max(seq.y)*flux.term.y/2, hjust = 0, parse = TRUE,
label = paste("'flux.term ='~", flux.term, "~", flux.term.unit), size = 3.2)
}
### prec ####
if(any(grepl("\\<prec\\>", plot.display))){
# position
prec.ord <- which(grep(paste(c("\\<nb.obs\\>",
"\\<flux.term\\>", "\\<prec\\>"), collapse = "|"),
plot.display, value = T) == "prec")
if(prec.ord == 1 | prec.ord == 3) prec.x <- 3
if(prec.ord == 2 | prec.ord == 4) prec.x <- 6
if(prec.ord <= 2) prec.y <- -0.8
if(prec.ord > 2) prec.y <- 1.6
# value
prec <- unique(data_corr[[f]]$prec)
# prec.display
prec.display <- annotate(
"text", x = seq(xmin, xmax, length.out=9)[prec.x], colour = "black",
y = ymin - ydiff*max(seq.y)*prec.y/2, hjust = 0,
label = paste("'prec ='~", prec, "~", gas.unit), parse = TRUE, size = 3.2)
}
}
# Draw plot ####
plot <- ggplot(plot_data, aes(x = Etime)) +
geom_point(aes(y = gas_meas, col = as.factor(flag_diff))) +
scale_color_manual(values = c("darkgrey", "black"), guide = "none") +
# Linear model
geom_abline(slope = LM.slope, intercept = LM.C0,
linewidth = 1, col = "blue") +
# Hutchinson and Mosier
geom_line(aes(y = HM_mod), linewidth = 1, col = "red") +
# Add a legend with info on the two models
new_scale_color() +
geom_text(data = mod.legend, parse = T, size = 3.5,
aes(x = x, y = y, label = content, hjust = 0, color = color)) +
scale_color_manual(values = mod.legend$color, guide = "none") +
# plot.display
nb.obs.display +
flux.term.display +
prec.display +
quality.check.display +
# Make the plot pretty
xlab("Time (sec)") + ylab +
scale_x_continuous(breaks = seq(-60, max(Etime), 30),
minor_breaks = seq(-60, max(Etime)+60, 10)) +
coord_cartesian(xlim = c(xmin + xdiff*0.05, xmax - xdiff*0.05),
ylim = c(ymin - ydiff*0.05, ymax + ydiff*max(seq.y))) +
theme_bw() +
ggtitle(UniqueID)+
theme(axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"))
plot
## Extract quality check ####
if(quality.check == TRUE){
# NEW PLOT LIMITS
ymin <- ymin - ydiff*min(seq.y)*1.8
# value
quality <- unique(data_split[[f]]$quality.check)
# quality.check.display
quality.check.display <- annotate(
"text", x = seq(xmin, xmax, length.out=9)[2], colour = "black",
y = ymin + ydiff*min(seq.y)*.9, hjust = 0, parse = TRUE, size = 3.2,
label = paste("'Quality check:'~", paste("'", quality, "'")))
}
## Extract quality check ####
if(quality.check == TRUE){
# NEW PLOT LIMITS
ymin <- ymin - ydiff*min(seq.y)*1.8
# value
quality <- unique(data_split[[f]]$quality.check)
# quality.check.display
quality.check.display <- annotate(
"text", x = seq(xmin, xmax, length.out=9)[2], colour = "black",
y = ymin - ydiff*min(seq.y)*.9, hjust = 0, parse = TRUE, size = 3.2,
label = paste("'Quality check:'~", paste("'", quality, "'")))
}
ggplot(plot_data, aes(x = Etime)) +
geom_point(aes(y = gas_meas, col = as.factor(flag_diff))) +
scale_color_manual(values = c("darkgrey", "black"), guide = "none") +
# Linear model
geom_abline(slope = LM.slope, intercept = LM.C0,
linewidth = 1, col = "blue") +
# Hutchinson and Mosier
geom_line(aes(y = HM_mod), linewidth = 1, col = "red") +
# Add a legend with info on the two models
new_scale_color() +
geom_text(data = mod.legend, parse = T, size = 3.5,
aes(x = x, y = y, label = content, hjust = 0, color = color)) +
scale_color_manual(values = mod.legend$color, guide = "none") +
# plot.display
nb.obs.display +
flux.term.display +
prec.display +
quality.check.display +
# Make the plot pretty
xlab("Time (sec)") + ylab +
scale_x_continuous(breaks = seq(-60, max(Etime), 30),
minor_breaks = seq(-60, max(Etime)+60, 10)) +
coord_cartesian(xlim = c(xmin + xdiff*0.05, xmax - xdiff*0.05),
ylim = c(ymin - ydiff*0.05, ymax + ydiff*max(seq.y))) +
theme_bw() +
ggtitle(UniqueID)+
theme(axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"))
plot.display
source(file = "R/flux.separator.R")
source(file = "R/separated.flux.plot.R")
p <- separated.flux.plot(
flux.results = best.flux_auto, dataframe = mydata_auto,
gastype = gastype, quality.check = TRUE,
plot.legend = c("SD"),
plot.display = c("nb.obs"))
print(p)
source(file = "R/separated.flux.plot.R")
p <- separated.flux.plot(
flux.results = best.flux_auto, dataframe = mydata_auto,
gastype = gastype, quality.check = TRUE,
plot.legend = c("SD"),
plot.display = c("nb.obs"))
p
# clearing workspace and console
rm(list = ls()) # clear workspace
cat("/014") # clear console
library(tidyverse)
library(egg)
library(goFlux)
library(devtools)
library(zoo)
library(pbapply)
library(ggnewscale)
source(file = "R/automaticflux.R")
source(file = "R/get_dxdy.R")
source(file = "R/join_auxfile_with_data.loop.R")
source(file = "R/plot.incubations.R")
source(file = "R/find_first_linear_chunk.R")
source(file = "R/plot.fluxSeparation.R")
source(file = "R/flag_diffusion.R")
source(file = "R/get_dCdt_density.R")
source(file = "R/flux.separator.R")
source(file = "R/separated.flux.plot.R")
# Loading data
mydata_all <- NULL
fs <- list.files(path = "data/",pattern = ".RData", full.names = T)
for(f in fs){
load(file = f)
mydata$Etime <- as.numeric(mydata$Etime)
mydata_all <- rbind(mydata_all, mydata)
rm(mydata)
}
# Loading auxfile table
myauxfile = read.csv("data/myauxfile.csv")
myauxfile$start.time <- as.POSIXct(myauxfile$start.time, tz = 'UTC', format="%d/%m/%Y %H:%M")
# automatic inspection of CO2 data and flux calculation
CH4_flux <- automaticflux(dataframe = mydata_all, myauxfile = myauxfile, shoulder = 30, gastype = "CH4dry_ppb",
fluxSeparation = T, displayPlots = T,
method = "trust.it.all") # trust.it.all or focus.on.linear
rlang::last_trace()
source(file = "R/separated.flux.plot.R")
# automatic inspection of CO2 data and flux calculation
CH4_flux <- automaticflux(dataframe = mydata_all, myauxfile = myauxfile, shoulder = 30, gastype = "CH4dry_ppb",
fluxSeparation = T, displayPlots = T,
method = "trust.it.all") # trust.it.all or focus.on.linear
# automatic inspection of CO2 data and flux calculation
CH4_flux <- automaticflux(dataframe = mydata_all, myauxfile = myauxfile, shoulder = 30, gastype = "CH4dry_ppb",
fluxSeparation = T, displayPlots = T,
method = "trust.it.all") # trust.it.all or focus.on.linear
mydf
dataframe <- mydata_all[mydata_all$UniqueID==unique(mydata_all$UniqueID)[1],]
mydf <- data.frame(POSIX.time = dataframe$POSIX.time,
time = as.numeric(dataframe$POSIX.time-first(dataframe$POSIX.time)),
conc = dataframe[[gastype]])
gastype = "CH4dry_ppb"
dataframe <- mydata_all[mydata_all$UniqueID==unique(mydata_all$UniqueID)[1],]
mydf <- data.frame(POSIX.time = dataframe$POSIX.time,
time = as.numeric(dataframe$POSIX.time-first(dataframe$POSIX.time)),
conc = dataframe[[gastype]])
df.stats <- NULL
for(t in seq(length.min, length(mydf$conc))){
lm.tmp <- lm(formula = conc~time, data = mydf[mydf$time<=t,])
df.stats <- rbind(df.stats, data.frame(t = t,
r2 = summary(lm.tmp)$adj.r.squared,
pval = summary(lm.tmp)$coefficients[2,4]))
}
length.min=30
mydf <- data.frame(POSIX.time = dataframe$POSIX.time,
time = as.numeric(dataframe$POSIX.time-first(dataframe$POSIX.time)),
conc = dataframe[[gastype]])
df.stats <- NULL
for(t in seq(length.min, length(mydf$conc))){
lm.tmp <- lm(formula = conc~time, data = mydf[mydf$time<=t,])
df.stats <- rbind(df.stats, data.frame(t = t,
r2 = summary(lm.tmp)$adj.r.squared,
pval = summary(lm.tmp)$coefficients[2,4]))
}
if(max(df.stats$r2)<0.3){
message("... no linear chunk could be found, the entire incubation was selected")
first_linear_chunk <- data.frame(UniqueID = unique(dataframe$UniqueID),
start = 1,
end = length(mydf$conc))
} else {
ind_bests <- which(df.stats$r2>quantile(df.stats$r2, 0.9) & df.stats$pval<0.05)
ind_not_1 <- which(diff(ind_bests)>10)
if(length(ind_not_1)==0){
ind_best <- which.max(df.stats$r2)
} else {ind_best <- ind_bests[min(ind_not_1)-1]}
t_selected <- df.stats$t[ind_best]
# plot(mydf$time, mydf$conc)
# points(mydf$time[mydf$time<=t_selected], mydf$conc[mydf$time<=t_selected], col='red')
first_linear_chunk <- data.frame(UniqueID = unique(dataframe$UniqueID),
start = 1,
end = t_selected)
}
plot(mydf$time, mydf$conc)
points(mydf$time[mydf$time<=t_selected], mydf$conc[mydf$time<=t_selected], col='red')
plot(df.stats$t, df.stats$r2)
ggplot(df.stats, aes(t, r2))+geom_point()+theme_article()
ggplot(df.stats, aes(t, r2, colour = r2))+geom_point()+theme_article()
ggplot(df.stats, aes(t, r2, colour = r2))+geom_point()+theme_article()+scale_colour_viridis_c(option = "A")
ggplot(df.stats, aes(t, r2, colour = r2))+geom_point()+theme_article()+scale_colour_viridis_c(option = "A", direction = -1)
dim(mydf)
dim(df.stats)
ggplot(mydf, aes(time, conc))+geom_point()+theme_article()
ggplot(mydf, aes(time, conc))+geom_point()+theme_article()+ggtitle(unique(dataframe$UniqueID))
ggplot(df.stats, aes(t, r2, colour = r2))+geom_point()+theme_article()+scale_colour_viridis_c(option = "A", direction = -1)+xlab("time [secs]")
ggplot(df.stats, aes(t, r2, colour = r2))+geom_point()+theme_article()+xlab("time [secs]")
ggplot(df.stats, aes(t, r2))+geom_point()+theme_article()+xlab("time [secs]")
ggplot(df.stats, aes(t, r2))+geom_point()+theme_article()+xlab("time [secs]")+geom_vline(xintercept = t_selected, colour = "red")
ggplot(df.stats, aes(t, r2))+geom_point()+theme_article()+xlab("time [secs]")+geom_vline(xintercept = t_selected, colour = "red")
ggplot(mydf, aes(time, conc))+geom_point()+theme_article()+
geom_point(mydf[mydf$time<=t_selected], aes(time, conc), colour = "red")
ggplot(mydf, aes(time, conc))+geom_point()+theme_article()+
geom_point(mydf[mydf$time<=t_selected,], aes(time, conc), colour = "red")+
ggtitle(unique(dataframe$UniqueID))
ggplot(mydf, aes(time, conc))+geom_point()+theme_article()+
geom_point(data = mydf[mydf$time<=t_selected,], aes(time, conc), colour = "red")+
ggtitle(unique(dataframe$UniqueID))
ggplot(mydf, aes(time, conc))+geom_point()+theme_article()+
geom_point(data = mydf[mydf$time<=t_selected,], aes(time, conc), colour = "red")+
ggtitle(unique(dataframe$UniqueID))+geom_vline(xintercept = t_selected, colour = "red")
p_r2 <- ggplot(df.stats, aes(t, r2))+geom_point()+theme_article()+xlab("time [secs]")+geom_vline(xintercept = t_selected, colour = "red")
p_conc <- ggplot(mydf, aes(time, conc))+geom_point()+theme_article()+
geom_point(data = mydf[mydf$time<=t_selected,], aes(time, conc), colour = "red")+
ggtitle(unique(dataframe$UniqueID))+geom_vline(xintercept = t_selected, colour = "red")
ggarrange(p_conc, p_r2)
t
p_r2 <- ggplot(df.stats, aes(t, r2))+geom_point()+theme_article()+xlab("time [secs]")+geom_vline(xintercept = t_selected, colour = "red")+xlim(c(0,t))
p_conc <- ggplot(mydf, aes(time, conc))+geom_point()+theme_article()+
geom_point(data = mydf[mydf$time<=t_selected,], aes(time, conc), colour = "red")+
ggtitle(unique(dataframe$UniqueID))+geom_vline(xintercept = t_selected, colour = "red")
ggarrange(p_conc, p_r2)+xlim(c(0,t))
p_r2 <- ggplot(df.stats, aes(t, r2))+geom_point()+theme_article()+xlab("time [secs]")+
geom_vline(xintercept = t_selected, colour = "red")+xlim(c(0,t))+ggtitle("R2 over a growing time window")
p_conc <- ggplot(mydf, aes(time, conc))+geom_point()+theme_article()+
geom_point(data = mydf[mydf$time<=t_selected,], aes(time, conc), colour = "red")+
ggtitle(unique(dataframe$UniqueID))+geom_vline(xintercept = t_selected, colour = "red")
ggarrange(p_conc, p_r2)+xlim(c(0,t))
p_r2 <- ggplot(df.stats, aes(t, r2))+geom_point()+theme_article()+xlab("time [secs]")+
geom_vline(xintercept = t_selected, colour = "red")+xlim(c(0,t))+ggtitle("LM.R2 over a growing time window")
p_conc <- ggplot(mydf, aes(time, conc))+geom_point()+theme_article()+
geom_point(data = mydf[mydf$time<=t_selected,], aes(time, conc), colour = "red")+
ggtitle(unique(dataframe$UniqueID))+geom_vline(xintercept = t_selected, colour = "red")
ggarrange(p_conc, p_r2)+xlim(c(0,t))
p_r2 <- ggplot(df.stats, aes(t, r2))+geom_point()+theme_article()+xlab("time [secs]")+
geom_vline(xintercept = t_selected, colour = "red")+xlim(c(0,t))+ggtitle("LM.r2 over a growing time window")
p_conc <- ggplot(mydf, aes(time, conc))+geom_point()+theme_article()+
geom_point(data = mydf[mydf$time<=t_selected,], aes(time, conc), colour = "red")+
ggtitle(unique(dataframe$UniqueID))+geom_vline(xintercept = t_selected, colour = "red")
ggarrange(p_conc, p_r2)+xlim(c(0,t))
mydf <- data.frame(POSIX.time = dataframe$POSIX.time,
time = as.numeric(dataframe$POSIX.time-first(dataframe$POSIX.time)),
conc = dataframe[[gastype]])
df.stats <- NULL
for(t in seq(length.min, length(mydf$conc))){
lm.tmp <- lm(formula = conc~time, data = mydf[mydf$time<=t,])
df.stats <- rbind(df.stats, data.frame(t = t,
r2 = summary(lm.tmp)$adj.r.squared,
pval = summary(lm.tmp)$coefficients[2,4]))
}
if(max(df.stats$r2)<0.3){
message("... no linear chunk could be found, the entire incubation was selected")
first_linear_chunk <- data.frame(UniqueID = unique(dataframe$UniqueID),
start = 1,
end = length(mydf$conc))
} else {
ind_bests <- which(df.stats$r2>quantile(df.stats$r2, 0.9) & df.stats$pval<0.05)
ind_not_1 <- which(diff(ind_bests)>10)
if(length(ind_not_1)==0){
ind_best <- which.max(df.stats$r2)
} else {ind_best <- ind_bests[min(ind_not_1)-1]}
t_selected <- df.stats$t[ind_best]
p_r2 <- ggplot(df.stats, aes(t, r2))+geom_point()+theme_article()+xlab("time [secs]")+
geom_vline(xintercept = t_selected, colour = "red")+xlim(c(0,t))+ggtitle("LM.r2 over a growing time window")
p_conc <- ggplot(mydf, aes(time, conc))+geom_point()+theme_article()+
geom_point(data = mydf[mydf$time<=t_selected,], aes(time, conc), colour = "red")+
ggtitle(unique(dataframe$UniqueID))+geom_vline(xintercept = t_selected, colour = "red")
ggarrange(p_conc, p_r2)+xlim(c(0,t))
first_linear_chunk <- data.frame(UniqueID = unique(dataframe$UniqueID),
start = 1,
end = t_selected)
}
ggarrange(p_conc, p_r2)+xlim(c(0,t))
dataframe <- mydata_all[mydata_all$UniqueID==unique(mydata_all$UniqueID)[3],]
dataframe
mydf <- data.frame(POSIX.time = dataframe$POSIX.time,
time = as.numeric(dataframe$POSIX.time-first(dataframe$POSIX.time)),
conc = dataframe[[gastype]])
df.stats <- NULL
for(t in seq(length.min, length(mydf$conc))){
lm.tmp <- lm(formula = conc~time, data = mydf[mydf$time<=t,])
df.stats <- rbind(df.stats, data.frame(t = t,
r2 = summary(lm.tmp)$adj.r.squared,
pval = summary(lm.tmp)$coefficients[2,4]))
}
if(max(df.stats$r2)<0.3){
message("... no linear chunk could be found, the entire incubation was selected")
first_linear_chunk <- data.frame(UniqueID = unique(dataframe$UniqueID),
start = 1,
end = length(mydf$conc))
} else {
ind_bests <- which(df.stats$r2>quantile(df.stats$r2, 0.9) & df.stats$pval<0.05)
ind_not_1 <- which(diff(ind_bests)>10)
if(length(ind_not_1)==0){
ind_best <- which.max(df.stats$r2)
} else {ind_best <- ind_bests[min(ind_not_1)-1]}
t_selected <- df.stats$t[ind_best]
p_r2 <- ggplot(df.stats, aes(t, r2))+geom_point()+theme_article()+xlab("time [secs]")+
geom_vline(xintercept = t_selected, colour = "red")+xlim(c(0,t))+ggtitle("LM.r2 over a growing time window")
p_conc <- ggplot(mydf, aes(time, conc))+geom_point()+theme_article()+
geom_point(data = mydf[mydf$time<=t_selected,], aes(time, conc), colour = "red")+
ggtitle(unique(dataframe$UniqueID))+geom_vline(xintercept = t_selected, colour = "red")
ggarrange(p_conc, p_r2)+xlim(c(0,t))
first_linear_chunk <- data.frame(UniqueID = unique(dataframe$UniqueID),
start = 1,
end = t_selected)
}
p
# automatic inspection of CO2 data and flux calculation
CH4_flux <- automaticflux(dataframe = mydata_all, myauxfile = myauxfile, shoulder = 30, gastype = "CH4dry_ppb",
fluxSeparation = T, displayPlots = T,
method = "trust.it.all") # trust.it.all or focus.on.linear
# clearing workspace and console
rm(list = ls()) # clear workspace
cat("/014") # clear console
library(tidyverse)
library(egg)
library(goFlux)
library(devtools)
library(zoo)
library(pbapply)
library(ggnewscale)
source(file = "R/automaticflux.R")
source(file = "R/get_dxdy.R")
source(file = "R/join_auxfile_with_data.loop.R")
source(file = "R/plot.incubations.R")
source(file = "R/find_first_linear_chunk.R")
source(file = "R/plot.fluxSeparation.R")
source(file = "R/flag_diffusion.R")
source(file = "R/get_dCdt_density.R")
source(file = "R/flux.separator.R")
source(file = "R/separated.flux.plot.R")
# Loading data
mydata_all <- NULL
fs <- list.files(path = "data/",pattern = ".RData", full.names = T)
for(f in fs){
load(file = f)
mydata$Etime <- as.numeric(mydata$Etime)
mydata_all <- rbind(mydata_all, mydata)
rm(mydata)
}
# Loading auxfile table
myauxfile = read.csv("data/myauxfile.csv")
myauxfile$start.time <- as.POSIXct(myauxfile$start.time, tz = 'UTC', format="%d/%m/%Y %H:%M")
# plot incubations overview
p <- plot.incubations(mydata_all)
print(p)
# to save these plots in a dedicated path, do
# gg_save_pdf(list = p, path = , filename = "myfilename.pdf")
# automatic inspection of CO2 data and flux calculation
CH4_flux <- automaticflux(dataframe = mydata_all, myauxfile = myauxfile, shoulder = 30, gastype = "CH4dry_ppb",
fluxSeparation = T, displayPlots = T,
method = "trust.it.all") # trust.it.all or focus.on.linear
# clearing workspace and console
rm(list = ls()) # clear workspace
cat("/014") # clear console
library(tidyverse)
library(egg)
library(goFlux)
library(devtools)
library(zoo)
library(pbapply)
library(ggnewscale)
source(file = "R/automaticflux.R")
source(file = "R/get_dxdy.R")
source(file = "R/join_auxfile_with_data.loop.R")
source(file = "R/plot.incubations.R")
source(file = "R/find_first_linear_chunk.R")
source(file = "R/flag_diffusion.R")
source(file = "R/get_dCdt_density.R")
source(file = "R/flux.separator.R")
source(file = "R/separated.flux.plot.R")
# Loading data
mydata_all <- NULL
fs <- list.files(path = "data/",pattern = ".RData", full.names = T)
for(f in fs){
load(file = f)
mydata$Etime <- as.numeric(mydata$Etime)
mydata_all <- rbind(mydata_all, mydata)
rm(mydata)
}
# Loading auxfile table
myauxfile = read.csv("data/myauxfile.csv")
myauxfile$start.time <- as.POSIXct(myauxfile$start.time, tz = 'UTC', format="%d/%m/%Y %H:%M")
# plot incubations overview
p <- plot.incubations(mydata_all)
print(p)
# to save these plots in a dedicated path, do
# gg_save_pdf(list
# automatic inspection of CO2 data and flux calculation
CO2_flux <- automaticflux(dataframe = mydata_all, myauxfile = myauxfile, shoulder = 30, gastype = "CO2dry_ppm",
fluxSeparation = F, displayPlots = T,
method = "focus.on.linear") # trust.it.all or focus.on.linear
# automatic inspection of CO2 data and flux calculation
CH4_flux <- automaticflux(dataframe = mydata_all, myauxfile = myauxfile, shoulder = 30, gastype = "CH4dry_ppb",
fluxSeparation = T, displayPlots = T,
method = "trust.it.all") # trust.it.all or focus.on.linear
CH4_flux
CO2_flux
class(myauxfile)
